name: Build OpenResty LoongArch64

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  BASE_IMAGE: ghcr.io/loong64/alpine
  IMAGE_NAME: openresty
  DOCKER_REGISTRY: ghcr.io
  LUAJIT_VERSION: v2.1-20250529-loongarch64
  LUAJIT_REPO: https://github.com/loongson/luajit2.git

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get.outputs.version }}
      build: ${{ steps.check.outputs.build }}
    steps:
      - name: Get latest OpenResty version
        id: get
        run: |
          latest=$(curl -s https://api.github.com/repos/openresty/docker-openresty/contents/alpine | \
            jq -r '.[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+.*' | sort -V | tail -n1)
          echo "version=$latest" >> $GITHUB_OUTPUT

      - name: Check if image already built
        id: check
        run: |
          version="${{ steps.get.outputs.version }}"
          echo "Checking release for $version ..."
          gh release view $version -R ${{ github.repository }} | grep "${{ env.IMAGE_NAME }}_${version}_linux_loong64.tar.gz" >/dev/null 2>&1 \
            || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check
    if: needs.check.outputs.build == '1'
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Dockerfile + LuaJIT
        run: |
          echo "Download OpenResty Dockerfile $version ..."
          curl -fsSL -o Dockerfile \
            https://raw.githubusercontent.com/openresty/docker-openresty/master/alpine/${version}/Dockerfile

      - name: Patch Dockerfile - BASE_IMAGE
        run: | 
          echo "Use Alpine LoongArch64 ..."
          sed -i "0,/^ARG RESTY_IMAGE_BASE=.*/s|^ARG RESTY_IMAGE_BASE=.*|ARG RESTY_IMAGE_BASE=${BASE_IMAGE}|" Dockerfile

      - name: Patch Dockerfile - LoongArch64 LuaJIT
        run: |
          echo "Use loongson LuaJIT ..."
          git clone --depth 1 --branch $LUAJIT_VERSION $LUAJIT_REPO LuaJIT
          sed -i '/^ARG RESTY_J="1"$/a COPY LuaJIT /tmp' Dockerfile
      
      - name: Patch Dockerfile - REPLACE
        run: |
          REPLACEMENT=$(cat <<'EOF'
          && cd /tmp/openresty-${RESTY_VERSION} \
          && LUAJIT_DIR=$(find bundle -maxdepth 1 -type d -name 'LuaJIT-*' | head -n1) \
          && echo "Replacing LuaJIT in $LUAJIT_DIR" \
          && rm -rf $LUAJIT_DIR/* \
          && cp -r /tmp/LuaJIT/* $LUAJIT_DIR/
          EOF
              )

          awk -v r="$REPLACEMENT" '
            $0 ~ /&& cd \/tmp\/openresty-\${RESTY_VERSION} \\\/ {
              print r
              next
            } 
            { print }
          ' Dockerfile > Dockerfile.new && mv Dockerfile.new Dockerfile
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/loong64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
